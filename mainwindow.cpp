#include "mainwindow.h"
#include "ui_mainwindow.h"
#include"QDockWidget"
#include"QAction"
#include"QPushButton"
#include"QVBoxLayout "
#include"QHBoxLayout"
#include"QFileDialog"
#include"QMessageBox"
#include"QLabel"
#include"QTableWidget"
#include"QHeaderView"
#include"QHeaderView"
#include"QCheckBox"
#include"QFont"
#include"QScrollArea"
#include"QDialog"
#include <QScrollBar>
#include"QDebug"
#include<QGridLayout>
#include<QString>
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    layouts();//控件布局布局
    InitData();
    InitUi();
    connect(this->action2,&QAction::triggered,[=](){
        try {
            QString pathName =
                    QFileDialog::getOpenFileName(this, tr("action"), "/images/", "Image file(*.bmp *.png *.jpg *.jpeg)", 0);
            if (pathName != "") {
                HalconCpp::HTuple  path = QString2Tuple(pathName);
                
                HalconCpp::ReadImage(& wi->m_thread.c_Operator.ho_Image, path);
                wi->AddImage( wi->m_thread.c_Operator.ho_Image);
            }
            
        } catch (HalconCpp::HException& e) {
            QMessageBox::information(NULL, tr("Tip"), tr("Select image path error!"), QMessageBox::Yes);
        }
    });
    
    connect(this->action1,&QAction::triggered,[=](){
        QString pathName =
                QFileDialog:: QFileDialog::getExistingDirectory(
                    this, "choose src Directory",
                    "/");
        if (pathName != "") {
            mywin_two->readeDocument(pathName);
        }
    });
    //相机
    connect(this->action4,&QAction::triggered,[=](){
        if(!isOpen){
            //打开相机
            isOpen=true;
            OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false",
                             "default", "[0] ", 0, -1, &wi->m_thread.c_Operator.hv_AcqHandle);
            wi->binding();
            startThread();
            this->action4->setText("关闭相机");

        }else{
            //关闭相机
            CloseFramegrabber( wi->m_thread.c_Operator.hv_AcqHandle);
            stopThread();
            this->action4->setText("打开相机");
            isOpen=false;
        }
    });
    
    //单帧采集
    connect(this->action6,&QAction::triggered,[=](){
        if(!isOpen){

            HalconCpp:: HObject  ho_Image;

            // Local control variables
            HalconCpp:: HTuple  hv_AcqHandle;

            //Image Acquisition 01: Code generated by Image Acquisition 01
            OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false",
                             "default", "[0] ", 0, -1, &hv_AcqHandle);
            GrabImageStart(hv_AcqHandle, -1);
            GrabImageAsync(&ho_Image, hv_AcqHandle, -1);
            //Image Acquisition 01: Do something
            wi->AddImage(ho_Image);
            CloseFramegrabber(hv_AcqHandle);
        }
    });

    connect(this->action3,&QAction::triggered,[=](){

        try {
            HalconCpp::ClearWindow( wi->m_thread.c_Operator.hv_WindowHandle);
            HalconCpp::DispObj( wi->m_thread.c_Operator.ho_Image, wi->m_thread.c_Operator.hv_WindowHandle);
        } catch (HalconCpp::HException& e) {

        }

    });
    //栈控件
    ui->stackedWidget->setCurrentIndex(0);
    connect(ui->toolButton_3,&QToolButton::clicked,[=](){
        ui->stackedWidget->setCurrentIndex(0);
    });
    connect(ui->toolButton_5,&QToolButton::clicked,[=](){
        ui->stackedWidget->setCurrentIndex(2);
    });
    //树控件
    QHeaderView *head=ui->treeWidget->header();
    head->setSectionResizeMode(QHeaderView::ResizeToContents);
}
MainWindow::~MainWindow()
{
    delete ui;
}

HalconCpp::HTuple MainWindow::QString2Tuple(QString str) {
    QByteArray ba   = str.toLatin1();
    char*      data = ba.data();
    return (HalconCpp::HTuple)data;
}
void MainWindow::createMeun()
{
    meun = new QMenu(ui->tableWidget);
    moveUp = new QAction("上移", this);
    moveDown = new QAction("下移", this);
    del = new QAction(" 删除", this);
    vRaySun=new QAction("参数修改", this);
    meun->addAction(moveUp);
    meun->addAction(moveDown);
    meun->addAction(del);
    meun->addAction(vRaySun);
    
}
void MainWindow::moveRow(QTableWidget *pTable, int nFrom, int nTo)
{
    if( pTable == NULL ) return;
    pTable->setFocus();
    if( nFrom == nTo ) return;
    if( nFrom < 0 || nTo < 0 ) return;
    int nRowCount = pTable->rowCount();
    if( nFrom >= nRowCount  || nTo > nRowCount ) return;
    if( nTo < nFrom ) nFrom++;
    pTable->insertRow( nTo );
    int nCol = pTable->columnCount();
    for( int i=0; i<nCol; i++ ) {
        pTable->setItem( nTo, i, pTable->takeItem( nFrom , i ) );
    }
    if( nFrom < nTo  ) nTo--;
    pTable->removeRow( nFrom );
    pTable->selectRow( nTo );
}

void MainWindow::layouts(){
    //菜单栏
    QMenu *menu1=new QMenu("文件");
    QMenu *menu2=new QMenu("编辑");
    QMenu *menu3=new QMenu("建议");
    ui->menuBar->addMenu(menu1);
    ui->menuBar->addMenu(menu2);
    ui->menuBar->addMenu(menu3);
    QAction* saveFile=new QAction("保存文件",menu1);
    QAction* openFile=new QAction("打开文件",menu1);

    QMenu *menu4=new QMenu;

    menu1->addAction(saveFile);
    menu1->addAction(openFile);


    connect(saveFile,&QAction::triggered,this,[=](){
        QString phat = QFileDialog::getSaveFileName(this, tr("Open Config"),"",tr("Config Files (*.txt)"));
        QMap<int,h_operators*> *m= &(this->wi->m_thread.c_Operator.creat_opertor);
        for(QMap<int,h_operators*>::iterator it=m->begin();it!=m->end();it++){
            qDebug()<< it.value();
            it.value()->archive(phat);

        }
    });
    connect(openFile,&QAction::triggered,this,[=](){
        isRead=true;
        QString pathName =
                QFileDialog::getOpenFileName(this, tr("action"), "", "file(*.txt)", 0);

        //创建算子
        h_operators read;
        QMap<QString ,QVector<HalconCpp::HTuple >*> *m= read.read(pathName);
        for (QMap<QString ,QVector<HalconCpp::HTuple >*> ::iterator it=m->begin();it!=m->end();it++) {
            QString logo=it.key();
            int key=logo.left(1).toInt();
            QString tableText=logo;

            QTableWidgetItem *qwt =new QTableWidgetItem;
            qwt->setText(tableText);
            qwt->setTextAlignment(Qt::AlignLeft);
            // 字体大小
            QFont font;
            font.setPointSize(12);
            qwt->setFont(font);
            //添加到table
            grid= ui->tableWidget->rowCount();
            ui->tableWidget->insertRow(grid);
            ui->tableWidget->setItem(grid,0,qwt);

            h_operators * h= wi->m_thread.c_Operator.createOperator(key);
            this->wi->m_thread.c_Operator.creat_opertor.insert(key,h);
            //初始化数据
            h->setMessage(*it.value(),isRead);
        }
        //默认选中行
        ui->tableWidget->selectRow(0);
        isRead=false;
    });


    //悬浮窗口1
    QDockWidget *dow4=new QDockWidget("图像窗口",this);
    // 重置题栏
    QWidget* lEmptyWidget = new QWidget();
    QVBoxLayout *vbl5=new QVBoxLayout ;
    QLabel *ql=new QLabel ("显示窗口");
    vbl5->addWidget(ql);
    lEmptyWidget->setStyleSheet("background-color:black;");
    lEmptyWidget->setLayout(vbl5);
    dow4->setTitleBarWidget(lEmptyWidget);
    //设置窗体大小
    dow4->setFixedSize(600,500);
    QVBoxLayout *vbl4=new QVBoxLayout ;
    wi = new MyWin(this);
    vbl4->minimumSize().setWidth(500);
    vbl4->minimumSize().setHeight(500);
    vbl4->addWidget(wi);
    
    QWidget * wid4=new QWidget;
    wid4->setLayout(vbl4);
    dow4->setWidget(wid4);
    
    addDockWidget(Qt::LeftDockWidgetArea,dow4);
    dow4->setAllowedAreas(Qt::LeftDockWidgetArea);


    //显示原图
    select_picture();
    
    //悬浮窗口2
    QDockWidget *dow2=new QDockWidget(this);
    //自定义标题栏
    QWidget* lEmptyWidget2 = new QWidget();
    QVBoxLayout *vbl52=new QVBoxLayout ;
    QLabel *ql2=new QLabel ("图片窗口");
    vbl52->addWidget(ql2);
    lEmptyWidget2->setStyleSheet("background-color:black;");
    lEmptyWidget2->setLayout(vbl52);
    dow2->setTitleBarWidget(lEmptyWidget2);

    QWidget *wid2=new QWidget;
    mywin_two =new Mywin_two(wi);
    QHBoxLayout * vbl2=new QHBoxLayout ;//水平直布局
    vbl2->addWidget(mywin_two);
    //保存图片的信号和草
    save_picture(dow2);
    wid2->setLayout(vbl2);
    dow2->setWidget(wid2);
    //初始停靠点
    addDockWidget(Qt::LeftDockWidgetArea,dow2);
    //允许停靠点
    dow2->setAllowedAreas(Qt::LeftDockWidgetArea);
    
    //悬浮窗口3
    QDockWidget *dow3=new QDockWidget(this);
    //自定义标题栏
    QWidget* lEmptyWidget3 = new QWidget();
    QVBoxLayout *vbl53=new QVBoxLayout ;
    QLabel *ql3=new QLabel ("参数窗口");
    vbl53->addWidget(ql3);
    lEmptyWidget3->setStyleSheet("background-color:black;");
    lEmptyWidget3->setLayout(vbl53);
    dow3->setTitleBarWidget(lEmptyWidget3);

    QWidget * wid3=new QWidget;
    mywin_three=new Mywin_three;
    QVBoxLayout * vbl3=new QVBoxLayout;
    vbl3->addWidget(mywin_three);
    wid3->setLayout(vbl3);
    dow3->setWidget(wid3);
    addDockWidget(Qt::LeftDockWidgetArea,dow3);
    dow3->setAllowedAreas(Qt::LeftDockWidgetArea);
    
    
    //工具栏
    action1=new QAction("文件");
    action2=new QAction("加载图片");
    action3=new QAction("显示原图");
    action4=new QAction("打开相机");
    action6=new QAction("抓拍图片");
    ui->toolBar->addAction(action1);
    ui->toolBar->addAction(action2);
    ui->toolBar->addAction(action3);
    ui->toolBar->addAction(action4);
    ui->toolBar->addAction(action6);
    
    // 树控件
    QTreeWidgetItem * item1=new QTreeWidgetItem;
    QTreeWidgetItem * item2=new QTreeWidgetItem;
    QTreeWidgetItem * item3=new QTreeWidgetItem;
    item1->setText(0,"取图");
    item2->setText(0,"工具");
    item3->setText(0,"补正");
    
    QTreeWidgetItem * item1_1=new QTreeWidgetItem(QStringList()<<"1.circle");
    QTreeWidgetItem * item1_2=new QTreeWidgetItem(QStringList()<<"2.椭圆");
    QTreeWidgetItem * item1_3=new QTreeWidgetItem(QStringList()<<"3.矩形");
    QTreeWidgetItem * item1_4=new QTreeWidgetItem(QStringList()<<"4.方位矩形");
    QTreeWidgetItem * item2_1=new QTreeWidgetItem(QStringList()<<"5.二值化");
    QTreeWidgetItem * item2_2=new QTreeWidgetItem(QStringList()<<"6.开运算");
    item1->addChild(item1_1);
    item1->addChild(item1_2);
    item1->addChild(item1_3);
    item1->addChild(item1_4);
    item2->addChild(item2_1);
    item2->addChild(item2_2);
    ui->treeWidget->addTopLevelItem(item1);
    ui->treeWidget->addTopLevelItem(item2);
    ui->treeWidget->addTopLevelItem(item3);
    
    //列表控件
    ui->tableWidget->setColumnWidth(0, 200);
    ui->tableWidget->setContextMenuPolicy(Qt::CustomContextMenu);
    //只能选一 行
    ui->tableWidget->setSelectionMode(QAbstractItemView::SingleSelection);
    ui->tableWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
    createMeun();//创建右键菜单
    connect(ui->tableWidget, &QTableWidget::customContextMenuRequested,this,[=](QPoint pos){
        //获取选中的行
        if(ui->tableWidget->item(0,0)!=nullptr){
            QList<QTableWidgetItem*> items = ui->tableWidget->selectedItems();
            row = ui->tableWidget->row(items.at(0));
            meun->exec(QCursor::pos());
        }
    });
    
    //添加算法
    ui->tableWidget->setShowGrid(false);
    ui->tableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->tableWidget->horizontalHeader()->setFixedHeight(0);
    ui->tableWidget->setStyleSheet("selection-background-color:lightblue;");
    ui->tableWidget->setAlternatingRowColors(true);
    
    connect(ui->treeWidget,&QTreeWidget::itemDoubleClicked,this,[=](QTreeWidgetItem *item, int column){
        if(item->parent()){
            ui->tableWidget->setHorizontalHeaderLabels(QStringList()<<item->text(column));
            QTableWidgetItem *qwt =new QTableWidgetItem;
            
            QString str=item->text(column);
            qwt->setText(str);
            // qwt->setText(str.right(str.length()-2));
            qwt->setTextAlignment(Qt::AlignLeft);
            // 字体大小
            QFont font;
            font.setPointSize(12);
            qwt->setFont(font);
            
            //添加到table
            grid= ui->tableWidget->rowCount();
            ui->tableWidget->insertRow(grid);
            ui->tableWidget->setItem(grid,0,qwt);
            
            //创建算子
            int key=str.left(1).toInt();
            h_operators * h= wi->m_thread.c_Operator.createOperator(key);
            this->wi->m_thread.c_Operator.creat_opertor.insert(key,h);
            //默认选中行
            ui->tableWidget->selectRow(0);
        }

        
    });
    // 上移动
    connect(moveUp,&QAction::triggered,[=](){
        moveRow( ui->tableWidget,  row, row-1 );
    });
    //下移动
    connect(moveDown,&QAction::triggered,[=](){
        moveRow( ui->tableWidget,  row, row+2);
    });
    //删除
    connect(del,&QAction::triggered,[=](){
        //相机模式下：停止调用删除的方法
        stopCall=false;

        QString str=ui->tableWidget->selectedItems()[0]->text();
        int k=str.left(1).toInt();
        QMap<int ,h_operators*>& h_op=  this->wi->m_thread.c_Operator.creat_opertor;
        //删除行
        ui->tableWidget->removeRow(row);
        grid--;
        QMap<int,h_operators*>::iterator pos = h_op.find(k);
        if(pos!=h_op.end()){
            //删除输出图片
            mywin_two->deleOutputImage(pos.value());
            //删除输出数据

            //删除集合中的算子
            (&h_op)->remove(k);
        }
        ui->stackedWidget->setCurrentIndex(1);
    });
    //参数控制
    connect(vRaySun,&QAction::triggered,[=](){
        QString str=ui->tableWidget->selectedItems()[0]->text();
        int k=str.left(1).toInt();
        ui_operator_found(k);
        //显示ui界面
        ui->stackedWidget->setCurrentIndex(1);
        isControl=true;
    });

};

void MainWindow::InitData(){
    connect(&wi->m_thread,&MyThread::threadSignals,this,&MainWindow::runs);
}
void MainWindow::InitUi() {
    //    vbl4->addWidget(wi);
    //this->showMinimized();
}


void MainWindow::runs(){
    wi->AddImage(wi->m_thread.c_Operator.ho_Image);
    emit camera();

}
void MainWindow::startThread(){
    if(!wi->m_thread.isRunning()){
        wi->m_thread.falg=true;
        wi->m_thread.start();
    }
};
void MainWindow:: stopThread(){
    if(wi->m_thread.isRunning()){
        wi->m_thread.falg=false;
        wi->m_thread.quit();
    }
}

void MainWindow::ui_operator_found(int k)
{
    switch (k) {

    case MyEnum::halcon_operator::drawCircle:
        ui_drawCircles=new DrawCircles(this);
        ui_drawCircles->ui_creator();
        ui->stackedWidget->insertWidget(1,ui_drawCircles);
        break;
    case MyEnum::halcon_operator::drawellipes:
        
        break;
        
    case MyEnum::halcon_operator::threshold:
        ui_thresholds=new Thresholds(this);
        ui_thresholds->ui_thresholds();
        ui->stackedWidget->insertWidget(1,ui_thresholds);
        break;

    case MyEnum::halcon_operator::openingCircle:
        ui_OpeningCircle=new OpeningCircle(this);
        ui_OpeningCircle->ui_openingCircle();
        ui->stackedWidget->insertWidget(1,ui_OpeningCircle);
        break;
    }
}

void MainWindow::dataInteraction(int k,h_operators * h)
{
    QVector<HalconCpp::HTuple> * v=new QVector<HalconCpp::HTuple> ;
    switch (k) {
    case MyEnum::halcon_operator::drawCircle:

        v->clear();
        v->push_back(ui_drawCircles->color);
        h->setMessage(*v,isRead);
        break;
    case MyEnum::halcon_operator::drawellipes:
        
        break;
        
    case MyEnum::halcon_operator::threshold:

        connect(ui_thresholds,&Thresholds::dynamic,this,[=](){
            v->clear();
            v->push_back(ui_thresholds->up);
            v->push_back(ui_thresholds->lower);
            h->setMessage(*v,isRead);
            h->Myoperators();
        });
        break;

    case MyEnum::halcon_operator::openingCircle:
        v->clear();
        v->push_back(ui_OpeningCircle->radius);
        h->setMessage(*v,isRead);
        break;
    default:
        break;
    }
}

void MainWindow::save_picture(QDockWidget *dow)
{
    connect(wi,&MyWin::save_image,this,[=](){
        HalconCpp:: HObject h;
        HalconCpp::DumpWindowImage(&h,wi->m_thread.c_Operator.hv_WindowHandle);
        mywin_two->addObject(h,wi);

    });
}

void MainWindow::select_picture()
{
    connect(wi,&MyWin::select_Old_image,this,[=](){
        try {
            HalconCpp::ClearWindow( wi->m_thread.c_Operator.hv_WindowHandle);
            wi->AddImage(wi->m_thread.c_Operator.ho_Image);
            // HalconCpp::DispObj(wi->m_thread.c_Operator.ho_Image, wi->m_thread.c_Operator.hv_WindowHandle);
        } catch (HalconCpp::HException& e) {

        }
    });
};
//点点滴滴
void MainWindow::on_toolButton_clicked()
{
    // 行号
    if(ui->tableWidget->item(0,0)!=nullptr){
        QList<QTableWidgetItem*> items = ui->tableWidget->selectedItems();
        CheckedRow=ui->tableWidget->row(items.at(0));
        //对应的文本
        QString str=ui->tableWidget->selectedItems()[0]->text();
        //选中的行
        ui->tableWidget->selectRow(++CheckedRow);
        //找到Qmap中的算子对象
        int k=str.left(1).toInt();
        QMap<int,h_operators*>::iterator pos = wi->m_thread.c_Operator.creat_opertor.find(k);
        if(pos!=wi->m_thread.c_Operator.creat_opertor.end()){
            //是否打开相机
            h_operators* h= pos.value();
           if(isOpen&&k!=1&&k!=2&&k!=3&&k!=4){
                connect(this,&MainWindow::camera,this,[=](){
                    if(stopCall){
                        if(isControl){
                            dataInteraction(k,h);
                            h->Myoperators();
                        }else{
                            h->Myoperators();
                        }
                    }
                });
            }else{
                if(isControl){
                    dataInteraction(k, h);
                    h->Myoperators();
                }else{
                    h->Myoperators();
                }
                QMap<QString, QVector<DateClass>*> &m=h->getHtup();
                if(!m.empty()){
                    mywin_three->addDate(m);
                }
           }
            mywin_two->showImage(h->getObj(),h);
            isControl=false;
            stopCall=true;
        }
    }
}
//一条龙
void MainWindow::on_toolButton_2_clicked()
{
    QList<QTableWidgetItem*> items = ui->tableWidget->selectedItems();
    CheckedRow=ui->tableWidget->row(items.at(0));
    int i=  ui->tableWidget-> rowCount();
    
    while(CheckedRow<i){
        
        ui->tableWidget->selectRow(++CheckedRow);
    }
}
